
fe_anon_user:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_anonymous_user"
    TEST_ENVIRONMENT: "kibana_anonymous_user"
    TEST_COMPOSEFILE: "docker-compose-kibana-anonymous_user.yml"
    TEST_KI_CONFIG: "anonymous_user"

fe_basicauth:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "basicauth"

fe_basicauth_basepath:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth_basepath"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "basicauth_basepath"

fe_basicauth_no_mt:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth_multitenancy_disabled"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "basicauth_multitenancy_disabled"

fe_clientcert_basepath:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_clientcert_basepath"
    TEST_ENVIRONMENT: "kibana_xpack_clientcert"
    TEST_KI_CONFIG: "clientcert"

fe_multitenancy:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_basicauth_multitenancy"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "basicauth"

fe_openid_auth0:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_openid_auth0"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "openid_auth0"

fe_openid_keycloak:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_openid_keycloak"
    TEST_ENVIRONMENT: "kibana_noxpack_openid"
    TEST_KI_CONFIG: "openid_keycloak"

fe_saml_keycloak:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_saml_keycloak"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "saml"

fe_saml_auth0:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_saml_auth0"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "saml"

fe_session_auth:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_session_auth"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "session_auth"

fe_sso_proxy:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_sso_proxy"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "sso_proxy"

fe_sso_jwt_header:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_sso_jwt_header"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "sso_jwt"

fe_sso_jwt_param:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_sso_jwt_param"
    TEST_ENVIRONMENT: "kibana_noxpack"
    TEST_KI_CONFIG: "sso_jwt"

fe_kerberos:
  extends:
  - .fe_integration_test
  variables:
    TEST: "kibana_kerberos"
    TEST_ENVIRONMENT: "kibana_xpack"
    TEST_KI_CONFIG: "kerberos"

# -------------------------------------------------------------------------

.fe_integration_test:
  stage: "Frontend Int Tests Core"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    - if: $CI_PIPELINE_SOURCE == "schedule || $VERACODE_SANDBOX_SCAN_ONLY"
      when: never
  variables:
    TEST: "«TBD»"
    TEST_ENVIRONMENT: "default"
    TEST_COMPOSEFILE: "docker-compose-kibana.yml"
    TEST_KI_CONFIG: "default"
    TEST_SG_ES_PLUGIN: "$SG_ES_PLUGIN"
    TEST_SG_ADMIN: "$SG_ADMIN"
    TEST_ES_VERSION: "$ES_VERSION"
    TEST_SG_KI_PLUGIN: "$SG_KI_PLUGIN"
    TEST_KI_VERSION: "$KI_VERSION"
    TEST_IT_BRANCH: "$IT_BRANCH"
  image: floragunncom/ci-docker-compose-openjdk11:19.03.1
  before_script:
    - sudo sysctl -w vm.max_map_count=262144
    - docker-compose --version
    - apk update
    - apk add jq curl zip  openssh-client
    - apk add python python-dev python py3-setuptools py-pip git
    - pip install awscli --upgrade || true
  services:
    - docker:19.03-dind
  tags:
    - test-large
  script:
    - |
       echo "============================================="
       echo "TEST_IT_BRANCH: $TEST_IT_BRANCH"
       echo "TEST_SG_ES_PLUGIN: $TEST_SG_ES_PLUGIN"
       echo "TEST_ES_VERSION: $TEST_ES_VERSION"
       echo "TEST_SG_KI_PLUGIN: $TEST_SG_KI_PLUGIN"
       echo "TEST_KI_VERSION: $TEST_KI_VERSION"
       echo "============================================="
       if [[ ! "$TEST_SG_KI_PLUGIN" =~ ^https?:.*$ ]]; then
         if [[ "$TEST_SG_KI_PLUGIN" =~ .*SNAPSHOT.* ]]; then
          SG_KI_PLUGIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-kibana-plugin&v=$TEST_SG_KI_PLUGIN&repos=search-guard-kibana-plugin-snapshot"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) 
          TEST_SG_KI_PLUGIN=https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-snapshot/com/floragunn/search-guard-kibana-plugin/$TEST_SG_KI_PLUGIN/$SG_KI_PLUGIN_FILE.zip
          echo "Found: $TEST_SG_KI_PLUGIN"
         else
          SG_KI_PLUGIN_FILE=$(curl -Ss --fail "https://maven.search-guard.com/api/search/gavc?g=com.floragunn&a=search-guard-kibana-plugin&v=$TEST_SG_KI_PLUGIN&repos=search-guard-kibana-plugin-release"| grep zip|sed -E "s/(.*)\/(.*).zip(.*)/\2/"|sort|uniq|tail -n 1) 
          TEST_SG_KI_PLUGIN=https://maven.search-guard.com/artifactory/search-guard-kibana-plugin-release/com/floragunn/search-guard-kibana-plugin/$TEST_SG_KI_PLUGIN/$SG_KI_PLUGIN_FILE.zip
          echo "Found: $TEST_SG_KI_PLUGIN"
         fi
       fi		
       echo "export SG_SNAPSHOT=${TEST_SG_ES_PLUGIN}" >> $CI_PROJECT_DIR/environment.env
       echo "export SGADMIN_SNAPSHOT=${TEST_SG_ADMIN}" >> $CI_PROJECT_DIR/environment.env
       echo "export SG_SOURCE=snapshot" >> $CI_PROJECT_DIR/environment.env
       echo "export SG_VERSION=whatever" >> environment.env
       echo "export BASEIMAGE=0.9.3-open-jdk-11" >> $CI_PROJECT_DIR/environment.env
       echo "export ES_VERSION=$TEST_ES_VERSION" >> $CI_PROJECT_DIR/environment.env
       echo "export KIBANA_VERSION=${TEST_KI_VERSION}"  >> $CI_PROJECT_DIR/environment.env
       echo "export KI_URL=https://artifacts.elastic.co/downloads/kibana/kibana-$TEST_KI_VERSION-linux-x86_64.tar.gz"
       echo "export KI_SNAPSHOT=${TEST_SG_KI_PLUGIN}"  >> $CI_PROJECT_DIR/environment.env
       echo "export KI_SOURCE=snapshot" >> $CI_PROJECT_DIR/environment.env
       echo "export KI_PLUGIN_VERSION=whatever" >> environment.env
       cat environment.env
       echo "============================================="
       . ./environment.env
       git clone --depth 1 --branch $TEST_IT_BRANCH https://gitlab-ci-token:${CI_JOB_TOKEN}@git.floragunn.com/private/search-guard-integration-tests.git > /dev/null
       cd search-guard-integration-tests
       echo "Copying variables file"
       cp ../environment.env ./
       echo "Copying scripts for CI test execution"
       cp ci-tools/*.sh ./
       echo "Executing submit_test.sh"
       ./submit_test.sh "$TEST" ""
  needs:
    - job: deploy_snapshot
      artifacts: true
      optional: true
    - job: deploy_staging
      artifacts: true
      optional: true
  artifacts:
    when: always
    paths:
      - search-guard-integration-tests/test/logs/
      - search-guard-integration-tests/test/testresults/
      - search-guard-integration-tests/environment.env
    reports:
      junit:
        - "search-guard-integration-tests/test/testresults/junit/Test*.xml"
    expire_in: 30 days